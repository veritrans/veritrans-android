apply plugin: 'com.android.library'
apply from: "$rootDir/build-system/corekit/jacoco.gradle"
apply from: "$rootDir/build-system/publish-variable.gradle"

android {
    def DEFAULT_PUBLISH
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.coreMinSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3
        versionName versionSdk

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField "String", "CALLBACK_STRING", "\"/token/callback/\""
        buildConfigField "String", "CALLBACK_URL", "\"https://hangout.betas.in/veritrans/api/paymentstatus\""
        buildConfigField "String", "BBM_MONEY_PACKAGE", "\"com.monitise.client.android.bbmmoney\""
        buildConfigField "String", "MARKET_URL", "\"market://details?id=\""
        buildConfigField "String", "PLAY_STORE_URL", "\"https://play.google.com/store/apps/details?id=\""
        buildConfigField "String", "BBM_PREFIX_URL", "\"bbmmoney://api/payment/imp?data=\""
        buildConfigField "String", "VERSION_NAME", "\"" + versionName + "\""
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            // TODO: Revisit this later, getting `ERROR: Default file proguard-android.txt should not be used as a consumer configuration file.`
             consumerProguardFiles 'consumer-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    flavorDimensions "env"
    productFlavors {
        development {
            dimension "env"
            DEFAULT_PUBLISH = "developmentRelease"
            buildConfigField "String", "BASE_URL", "\"https://api.sandbox.midtrans.com/v2/\""
            buildConfigField "String", "SNAP_BASE_URL", "\"https://app.sandbox.midtrans.com/snap/\""
            buildConfigField "String", "PROMO_ENGINE_URL", "\"https://promo.vt-stage.info/\""
            matchingFallbacks = ["development"]
        }

        uat {
            dimension "env"
            DEFAULT_PUBLISH = "uatRelease"
            buildConfigField "String", "BASE_URL", "\"https://api.stg.midtrans.com/v2/\""
            buildConfigField "String", "SNAP_BASE_URL", "\"https://midtrans-checkout.stg.veritrans.co.id/snap/\""
            buildConfigField "String", "PROMO_ENGINE_URL", "\"https://promo.vt-stage.info/\""
            matchingFallbacks = ["uat"]
        }

        production {
            dimension "env"
            DEFAULT_PUBLISH = "productionRelease"
            buildConfigField "String", "BASE_URL", "\"https://api.midtrans.com/v2/\""
            buildConfigField "String", "SNAP_BASE_URL", "\"https://app.midtrans.com/snap/\""
            buildConfigField "String", "PROMO_ENGINE_URL", "\"https://promo.vt-stage.info/\""
            matchingFallbacks = ["production"]
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-noverify'
        }
    }

    defaultPublishConfig = DEFAULT_PUBLISH
    publishNonDefault true
}

dependencies {
    implementation supportLibraries.appCompat
    implementation supportLibraries.supportV4
    implementation playServicesLibraries.auth
    implementation libraries.okHttp
    implementation libraries.okHttpInterceptor
    implementation libraries.retrofit
    implementation libraries.retrofitConverter

    developmentApi midtransInternalLibraries.analyticsSandbox
    uatApi midtransInternalLibraries.analyticsSandbox
    productionApi midtransInternalLibraries.analytics

    androidTestImplementation testLibraries.runner
    androidTestImplementation(testLibraries.powermock) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    testImplementation testLibraries.junit
    testImplementation testLibraries.mockito
    testImplementation(testLibraries.powermockMockito) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockJunit) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockJunitRule) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockMockito) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockXstream) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

apply from: "$rootDir/build-system/corekit/publishing.gradle"
