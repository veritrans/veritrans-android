apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply from: '../jacoco.gradle'
apply plugin: 'com.vanniktech.android.junit.jacoco'

group = 'com.midtrans'
version = '0.0.1'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.4.0'
    }
}
repositories {
    jcenter()
    maven { url "https://dl.bintray.com/pt-midtrans/maven" }
}


android {
    def DEFAULT_PUBLISH
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 2
        versionName version
        buildConfigField "String", "CALLBACK_STRING", "\"/token/callback/\""
        buildConfigField "String", "CALLBACK_URL", "\"https://hangout.betas.in/veritrans/api/paymentstatus\""
        buildConfigField "String", "BBM_MONEY_PACKAGE", "\"com.monitise.client.android.bbmmoney\""
        buildConfigField "String", "MARKET_URL", "\"market://details?id=\""
        buildConfigField "String", "PLAY_STORE_URL", "\"https://play.google.com/store/apps/details?id=\""
        buildConfigField "String", "BBM_PREFIX_URL", "\"bbmmoney://api/payment/imp?data=\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled true

            consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled = true;
        }
    }

    productFlavors {
        development {
            DEFAULT_PUBLISH = "developmentRelease"
            buildConfigField "String", "BASE_URL", "\"https://api.sandbox.midtrans.com/v2/\""
            buildConfigField "String", "SNAP_BASE_URL", "\"https://app.sandbox.midtrans.com/snap/\""
            buildConfigField "String", "PROMO_ENGINE_URL", "\"https://promo.vt-stage.info/\""
        }

        staging {
            DEFAULT_PUBLISH = "stagingRelease"
            buildConfigField "String", "BASE_URL", "\"https://api.stg.veritrans.co.id/v2/\""
            buildConfigField "String", "SNAP_BASE_URL", "\"https://midtrans-checkout1.stg.veritrans.co.id/snap/\""
            buildConfigField "String", "PROMO_ENGINE_URL", "\"https://promo.vt-stage.info/\""
        }

        production {
            DEFAULT_PUBLISH = "productionRelease"
            buildConfigField "String", "BASE_URL", "\"https://api.midtrans.com/v2/\""
            buildConfigField "String", "SNAP_BASE_URL", "\"https://app.midtrans.com/snap/\""
            buildConfigField "String", "PROMO_ENGINE_URL", "\"https://promo.vt-stage.info/\""
        }
    }

    defaultPublishConfig = DEFAULT_PUBLISH
    publishNonDefault true
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1' //version required
}

tasks.withType(Test) {
    jvmArgs '-Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxPermSize=1024m -Xms512m -XX:+HeapDumpOnOutOfMemoryError"'
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0'

    // Analytics Manager
    developmentCompile 'com.midtrans:analytics:1.3.3-SANDBOX'
    stagingCompile 'com.midtrans:analytics:1.3.3-SANDBOX'
    productionCompile 'com.midtrans:analytics:1.3.3'
    /*
     * test dependencies
     */
    // Android JUnit Runner
    androidTestCompile 'com.android.support.test:runner:0.5'

    testCompile 'junit:junit:4.12'

    testCompile 'org.mockito:mockito-core:1.10.19'

    testCompile ('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile ('org.powermock:powermock-module-junit4:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    testCompile ('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile ('org.powermock:powermock-module-junit4-rule:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    testCompile ('org.powermock:powermock-classloading-xstream:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    androidTestCompile ('org.powermock:powermock-mockito-release-full:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/corekit-development-release.aar")
            groupId group
            artifactId 'corekit'
            version version + "-SANDBOX"

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    if (it.group == 'com.midtrans') {
                        dependencyNode.appendNode('version', it.version + '-SANDBOX')
                    } else {
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                configurations.developmentCompile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

        BintrayStagingPublication(MavenPublication) {
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/corekit-staging-release.aar")
            groupId group
            artifactId 'corekit'
            version version + "-STAGING"

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    if (it.group == 'com.midtrans') {
                        dependencyNode.appendNode('version', it.version + '-STAGING')
                    } else {
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                configurations.stagingCompile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

        BintrayProductionPublication(MavenPublication) {
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/corekit-production-release.aar")
            groupId group
            artifactId 'corekit'
            version version

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                configurations.productionCompile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'pt-midtrans'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/veritrans/veritrans-android.git'
        desc = 'Android SDK for integrating with midtrans.com'
        websiteUrl = "https://midtrans.com"
        publish = true
        publicDownloadNumbers = true
    }
    publications = ['BintrayProductionPublication', 'BintrayPublication']

}

