apply plugin: 'com.android.library'
apply from: "$rootDir/build-system/uikit/jacoco.gradle"
apply from: "$rootDir/build-system/publish-variable.gradle"

android {
    def DEFAULT_PUBLISH
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion rootProject.ext.uiMinSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3
        versionName versionSdk
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField "String", "VERSION_NAME", "\"" + versionName + "\""
        resValue "string", "ISSUE_TRACKER_API_KEY", ISSUE_TRACKER_API_KEY
        buildConfigField "String", "BIN_RANGE", "\"6\""
    }
    buildTypes {
        release {
            minifyEnabled true
            // TODO: Revisit this later, getting `ERROR: Default file proguard-android.txt should not be used as a consumer configuration file.`
            // consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        debug {
            testCoverageEnabled = true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
    }

    flavorDimensions "env"
    productFlavors {
        development {
            dimension "env"
            DEFAULT_PUBLISH = "developmentRelease"
            manifestPlaceholders = [isByPassNonSsl:false]
            matchingFallbacks = ["development"]
        }
        uat {
            dimension "env"
            DEFAULT_PUBLISH = "uatRelease"
            manifestPlaceholders = [isByPassNonSsl:true]
            matchingFallbacks = ["uat"]
        }
        production {
            dimension "env"
            DEFAULT_PUBLISH = "productionRelease"
            manifestPlaceholders = [isByPassNonSsl:false]
            matchingFallbacks = ["production"]
        }
    }

    testOptions {
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
            }
        }
    }

    defaultPublishConfig = DEFAULT_PUBLISH
    publishNonDefault true
}

dependencies {
    implementation supportLibraries.appCompat
    implementation supportLibraries.supportV4
    implementation supportLibraries.recyclerview
    implementation supportLibraries.cardView
    implementation supportLibraries.design
    implementation libraries.swipeLayout
    implementation libraries.betterLinkMovement
    implementation libraries.smsVerify
    implementation libraries.zxing
    implementation libraries.ion
    implementation localizationLibraries.localization

    implementation project(':issuetracker')
    api project(':corekit')

    androidTestImplementation testLibraries.runner
    androidTestImplementation(testLibraries.powermock) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    testImplementation testLibraries.junit
    testImplementation testLibraries.mockito
    testImplementation testLibraries.junit
    testImplementation testLibraries.mockito
    testImplementation(testLibraries.powermockMockito) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockJunit) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockJunitRule) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockMockito) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation(testLibraries.powermockXstream) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}
